code 1 :
import numpy as np

def generate_walsh_matrix(n):
    if n == 1:
        return np.array([[1, 1], [1, -1]])
    small = generate_walsh_matrix(n - 1)
    top = np.hstack((small, small))
    bottom = np.hstack((small, -small))
    return np.vstack((top, bottom))

def cdma_simulation(num_users=8, intended_bit=1, noise_floor=1e-6):
    walsh = generate_walsh_matrix(int(np.log2(num_users)))
    intended_idx = np.random.randint(num_users)

    transmitted = intended_bit * walsh[intended_idx]
    noise = np.random.normal(0, np.sqrt(noise_floor), num_users)
    received = transmitted + noise

    print(f"\nIntended user: {intended_idx + 1}")
    print(f"Transmitted signal: {transmitted}")
    print(f"Received signal: {received}\n")

    for i in range(num_users):
        correlation = np.dot(received, walsh[i]) / num_users

        if i == intended_idx:
            signal_power = intended_bit ** 2
            noise_power = np.var(noise)
        else:
            # Interference comes from the non-orthogonality of codes
            interference = intended_bit * np.dot(walsh[intended_idx], walsh[i]) / num_users
            signal_power = 0
            noise_power = interference**2 + np.var(noise)

        snr = signal_power / noise_power if noise_power else float('inf')
        snr_db = 10 * np.log10(snr) if snr != float('inf') else float('inf')

        print(f"User {i + 1}:")
        print(f"  Correlation = {correlation:.4f}")
        print(f"  Signal Power = {signal_power:.6f}")
        print(f"  Noise Power = {noise_power:.6f}")
        print(f"  SNR = {snr_db:.2f} dB\n")

# Run the simulation
cdma_simulation()