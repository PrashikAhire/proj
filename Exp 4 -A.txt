Exp 4 -A
clc; 
clear; 
close all;
N = 10^6; % Number of bits or symbols
rand("state", 100); % Initializing the rand() function
randn("state", 200); % Initializing the randn() function
% Transmitter
ip = rand(1, N) > 0.5; % Generating 0s and 1s with equal probability
s = 2 * ip - 1; % BPSK modulation: 0 -> -1, 1 -> 1
% White Gaussian noise, 0 dB variance
n = (1 / sqrt(2)) * (randn(1, N) + 1j * randn(1, N)); 
Eb_N0_dB = -3:10; % Multiple Eb/N0 values
nErr = zeros(1, length(Eb_N0_dB)); % Initialize error count
for ii = 1:length(Eb_N0_dB)
    % Noise addition
    y = s + 10^(-Eb_N0_dB(ii) / 20) * n; % Additive White Gaussian Noise (AWGN)
    % Receiver - Hard decision decoding
    ipHat = real(y) > 0;
    % Counting the errors
    nErr(ii) = sum(ip ~= ipHat);
end
simBer = nErr / N; % Simulated BER
theoryBer = 0.5 * erfc(sqrt(10.^(Eb_N0_dB / 10))); % Theoretical BER
figure;
semilogy(Eb_N0_dB, theoryBer, 'b.-'); % Theoretical BER
hold on;
semilogy(Eb_N0_dB, simBer, 'mx-'); % Simulated BER
axis([-3 10 10^-5 0.5]);
grid on;
legend('Theoretical', 'Simulation');
xlabel('Eb/No (dB)');
ylabel('Bit Error Rate');
title('Bit Error Probability Curve for BPSK Modulation');

Exp4 -B 

 N = 10^6; % Number of bits or symbols
rand('state', 100); % Initializing the rand() function
randn('state', 200); % Initializing the randn() function
% Transmitter
ip = rand(1, N) > 0.5; % Generating 0s and 1s with equal probability
s = 2 * ip - 1; % BPSK modulation: 0 -> -1, 1 -> 1
n = (1 / sqrt(2)) * (randn(1, N) + 1j * randn(1, N)); % White Gaussian noise, 0dB variance
Eb_N0_dB = 0:35; % Multiple Eb/N0 values
nErr_AWGN = zeros(1, length(Eb_N0_dB));
nErr_Rayleigh = zeros(1, length(Eb_N0_dB));
for ii = 1:length(Eb_N0_dB)
    % AWGN Noise addition
    y_awgn = s + 10^(-Eb_N0_dB(ii) / 20) * n;
    ipHat_awgn = real(y_awgn) > 0;
    nErr_AWGN(ii) = sum(ip ~= ipHat_awgn);
    % Rayleigh fading channel
    h = (1/sqrt(2)) * (randn(1, N) + 1j * randn(1, N));
    y_rayleigh = h .* s + 10^(-Eb_N0_dB(ii) / 20) * n;
    ipHat_rayleigh = real(y_rayleigh ./ h) > 0;
    nErr_Rayleigh(ii) = sum(ip ~= ipHat_rayleigh);
end
simBer_AWGN = nErr_AWGN / N;
simBer_Rayleigh = nErr_Rayleigh / N;
theoryBer_AWGN = 0.5 * erfc(sqrt(10.^(Eb_N0_dB / 10)));
theoryBer_Rayleigh = 0.5 * (1 - sqrt(10.^(Eb_N0_dB / 10) ./ (1 + 10.^(Eb_N0_dB / 10))));
% Plot
figure;
semilogy(Eb_N0_dB, theoryBer_AWGN, 'b.-', 'DisplayName', 'AWGN-Theory');
hold on;
semilogy(Eb_N0_dB, simBer_AWGN, 'mx-', 'DisplayName', 'AWGN-Simulation');
semilogy(Eb_N0_dB, theoryBer_Rayleigh, 'r.-', 'DisplayName', 'Rayleigh-Theory');
semilogy(Eb_N0_dB, simBer_Rayleigh, 'go-', 'DisplayName', 'Rayleigh-Simulation');
axis([0 35 1e-5 0.5]);
grid on;
legend show;
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('BER for BPSK Modulation in AWGN and Rayleigh Channel');